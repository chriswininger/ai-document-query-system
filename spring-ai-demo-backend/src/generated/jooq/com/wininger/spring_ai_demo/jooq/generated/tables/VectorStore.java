/*
 * This file is generated by jOOQ.
 */
package com.wininger.spring_ai_demo.jooq.generated.tables;


import com.wininger.spring_ai_demo.jooq.generated.Indexes;
import com.wininger.spring_ai_demo.jooq.generated.Keys;
import com.wininger.spring_ai_demo.jooq.generated.Public;
import com.wininger.spring_ai_demo.jooq.generated.tables.records.VectorStoreRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VectorStore extends TableImpl<VectorStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vector_store</code>
     */
    public static final VectorStore VECTOR_STORE = new VectorStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VectorStoreRecord> getRecordType() {
        return VectorStoreRecord.class;
    }

    /**
     * The column <code>public.vector_store.id</code>.
     */
    public final TableField<VectorStoreRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.vector_store.content</code>.
     */
    public final TableField<VectorStoreRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.vector_store.metadata</code>.
     */
    public final TableField<VectorStoreRecord, JSON> METADATA = createField(DSL.name("metadata"), SQLDataType.JSON, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<VectorStoreRecord, Object> EMBEDDING = createField(DSL.name("embedding"), DefaultDataType.getDefaultDataType("\"public\".\"vector\""), this, "");

    private VectorStore(Name alias, Table<VectorStoreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VectorStore(Name alias, Table<VectorStoreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.vector_store</code> table reference
     */
    public VectorStore(String alias) {
        this(DSL.name(alias), VECTOR_STORE);
    }

    /**
     * Create an aliased <code>public.vector_store</code> table reference
     */
    public VectorStore(Name alias) {
        this(alias, VECTOR_STORE);
    }

    /**
     * Create a <code>public.vector_store</code> table reference
     */
    public VectorStore() {
        this(DSL.name("vector_store"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VECTOR_STORE_EMBEDDING_IDX);
    }

    @Override
    public UniqueKey<VectorStoreRecord> getPrimaryKey() {
        return Keys.VECTOR_STORE_PKEY;
    }

    @Override
    public VectorStore as(String alias) {
        return new VectorStore(DSL.name(alias), this);
    }

    @Override
    public VectorStore as(Name alias) {
        return new VectorStore(alias, this);
    }

    @Override
    public VectorStore as(Table<?> alias) {
        return new VectorStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VectorStore rename(String name) {
        return new VectorStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VectorStore rename(Name name) {
        return new VectorStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VectorStore rename(Table<?> name) {
        return new VectorStore(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VectorStore where(Condition condition) {
        return new VectorStore(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VectorStore where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VectorStore where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VectorStore where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VectorStore where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VectorStore where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VectorStore where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VectorStore where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VectorStore whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VectorStore whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, JSON, Object> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super JSON, ? super Object, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super JSON, ? super Object, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
