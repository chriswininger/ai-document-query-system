/*
 * This file is generated by jOOQ.
 */
package com.wininger.spring_ai_demo.jooq.generated.tables;


import com.wininger.spring_ai_demo.jooq.generated.Keys;
import com.wininger.spring_ai_demo.jooq.generated.Public;
import com.wininger.spring_ai_demo.jooq.generated.tables.DocumentImportChunk.DocumentImportChunkPath;
import com.wininger.spring_ai_demo.jooq.generated.tables.records.DocumentImportRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DocumentImport extends TableImpl<DocumentImportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.document_import</code>
     */
    public static final DocumentImport DOCUMENT_IMPORT = new DocumentImport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentImportRecord> getRecordType() {
        return DocumentImportRecord.class;
    }

    /**
     * The column <code>public.document_import.id</code>.
     */
    public final TableField<DocumentImportRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.document_import.source_name</code>.
     */
    public final TableField<DocumentImportRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.document_import.non_chunked_content</code>.
     */
    public final TableField<DocumentImportRecord, String> NON_CHUNKED_CONTENT = createField(DSL.name("non_chunked_content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.document_import.metadata</code>.
     */
    public final TableField<DocumentImportRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.document_import.created_at</code>.
     */
    public final TableField<DocumentImportRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.document_import.updated_at</code>.
     */
    public final TableField<DocumentImportRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private DocumentImport(Name alias, Table<DocumentImportRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DocumentImport(Name alias, Table<DocumentImportRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.document_import</code> table reference
     */
    public DocumentImport(String alias) {
        this(DSL.name(alias), DOCUMENT_IMPORT);
    }

    /**
     * Create an aliased <code>public.document_import</code> table reference
     */
    public DocumentImport(Name alias) {
        this(alias, DOCUMENT_IMPORT);
    }

    /**
     * Create a <code>public.document_import</code> table reference
     */
    public DocumentImport() {
        this(DSL.name("document_import"), null);
    }

    public <O extends Record> DocumentImport(Table<O> path, ForeignKey<O, DocumentImportRecord> childPath, InverseForeignKey<O, DocumentImportRecord> parentPath) {
        super(path, childPath, parentPath, DOCUMENT_IMPORT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DocumentImportPath extends DocumentImport implements Path<DocumentImportRecord> {
        public <O extends Record> DocumentImportPath(Table<O> path, ForeignKey<O, DocumentImportRecord> childPath, InverseForeignKey<O, DocumentImportRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DocumentImportPath(Name alias, Table<DocumentImportRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DocumentImportPath as(String alias) {
            return new DocumentImportPath(DSL.name(alias), this);
        }

        @Override
        public DocumentImportPath as(Name alias) {
            return new DocumentImportPath(alias, this);
        }

        @Override
        public DocumentImportPath as(Table<?> alias) {
            return new DocumentImportPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DocumentImportRecord, Integer> getIdentity() {
        return (Identity<DocumentImportRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentImportRecord> getPrimaryKey() {
        return Keys.DOCUMENT_IMPORT_PKEY;
    }

    private transient DocumentImportChunkPath _documentImportChunk;

    /**
     * Get the implicit to-many join path to the
     * <code>public.document_import_chunk</code> table
     */
    public DocumentImportChunkPath documentImportChunk() {
        if (_documentImportChunk == null)
            _documentImportChunk = new DocumentImportChunkPath(this, null, Keys.DOCUMENT_IMPORT_CHUNK__DOCUMENT_IMPORT_CHUNK_DOCUMENT_IMPORT_ID_FKEY.getInverseKey());

        return _documentImportChunk;
    }

    @Override
    public DocumentImport as(String alias) {
        return new DocumentImport(DSL.name(alias), this);
    }

    @Override
    public DocumentImport as(Name alias) {
        return new DocumentImport(alias, this);
    }

    @Override
    public DocumentImport as(Table<?> alias) {
        return new DocumentImport(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentImport rename(String name) {
        return new DocumentImport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentImport rename(Name name) {
        return new DocumentImport(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentImport rename(Table<?> name) {
        return new DocumentImport(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImport where(Condition condition) {
        return new DocumentImport(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImport where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImport where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImport where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImport where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImport where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImport where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImport where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImport whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImport whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, JSONB, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super String, ? super JSONB, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super String, ? super JSONB, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
