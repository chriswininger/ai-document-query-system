/*
 * This file is generated by jOOQ.
 */
package com.wininger.spring_ai_demo.jooq.generated.tables;


import com.wininger.spring_ai_demo.jooq.generated.Keys;
import com.wininger.spring_ai_demo.jooq.generated.Public;
import com.wininger.spring_ai_demo.jooq.generated.tables.DocumentImport.DocumentImportPath;
import com.wininger.spring_ai_demo.jooq.generated.tables.records.DocumentImportChunkRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DocumentImportChunk extends TableImpl<DocumentImportChunkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.document_import_chunk</code>
     */
    public static final DocumentImportChunk DOCUMENT_IMPORT_CHUNK = new DocumentImportChunk();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentImportChunkRecord> getRecordType() {
        return DocumentImportChunkRecord.class;
    }

    /**
     * The column <code>public.document_import_chunk.id</code>.
     */
    public final TableField<DocumentImportChunkRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.document_import_chunk.document_import_id</code>.
     */
    public final TableField<DocumentImportChunkRecord, Integer> DOCUMENT_IMPORT_ID = createField(DSL.name("document_import_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.document_import_chunk.source_name</code>.
     */
    public final TableField<DocumentImportChunkRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.document_import_chunk.content</code>.
     */
    public final TableField<DocumentImportChunkRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.document_import_chunk.metadata</code>.
     */
    public final TableField<DocumentImportChunkRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.document_import_chunk.status</code>.
     */
    public final TableField<DocumentImportChunkRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.document_import_chunk.created_at</code>.
     */
    public final TableField<DocumentImportChunkRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.document_import_chunk.updated_at</code>.
     */
    public final TableField<DocumentImportChunkRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private DocumentImportChunk(Name alias, Table<DocumentImportChunkRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DocumentImportChunk(Name alias, Table<DocumentImportChunkRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.document_import_chunk</code> table
     * reference
     */
    public DocumentImportChunk(String alias) {
        this(DSL.name(alias), DOCUMENT_IMPORT_CHUNK);
    }

    /**
     * Create an aliased <code>public.document_import_chunk</code> table
     * reference
     */
    public DocumentImportChunk(Name alias) {
        this(alias, DOCUMENT_IMPORT_CHUNK);
    }

    /**
     * Create a <code>public.document_import_chunk</code> table reference
     */
    public DocumentImportChunk() {
        this(DSL.name("document_import_chunk"), null);
    }

    public <O extends Record> DocumentImportChunk(Table<O> path, ForeignKey<O, DocumentImportChunkRecord> childPath, InverseForeignKey<O, DocumentImportChunkRecord> parentPath) {
        super(path, childPath, parentPath, DOCUMENT_IMPORT_CHUNK);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DocumentImportChunkPath extends DocumentImportChunk implements Path<DocumentImportChunkRecord> {
        public <O extends Record> DocumentImportChunkPath(Table<O> path, ForeignKey<O, DocumentImportChunkRecord> childPath, InverseForeignKey<O, DocumentImportChunkRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DocumentImportChunkPath(Name alias, Table<DocumentImportChunkRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DocumentImportChunkPath as(String alias) {
            return new DocumentImportChunkPath(DSL.name(alias), this);
        }

        @Override
        public DocumentImportChunkPath as(Name alias) {
            return new DocumentImportChunkPath(alias, this);
        }

        @Override
        public DocumentImportChunkPath as(Table<?> alias) {
            return new DocumentImportChunkPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DocumentImportChunkRecord, Integer> getIdentity() {
        return (Identity<DocumentImportChunkRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentImportChunkRecord> getPrimaryKey() {
        return Keys.DOCUMENT_IMPORT_CHUNK_PKEY;
    }

    @Override
    public List<ForeignKey<DocumentImportChunkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOCUMENT_IMPORT_CHUNK__DOCUMENT_IMPORT_CHUNK_DOCUMENT_IMPORT_ID_FKEY);
    }

    private transient DocumentImportPath _documentImport;

    /**
     * Get the implicit join path to the <code>public.document_import</code>
     * table.
     */
    public DocumentImportPath documentImport() {
        if (_documentImport == null)
            _documentImport = new DocumentImportPath(this, Keys.DOCUMENT_IMPORT_CHUNK__DOCUMENT_IMPORT_CHUNK_DOCUMENT_IMPORT_ID_FKEY, null);

        return _documentImport;
    }

    @Override
    public DocumentImportChunk as(String alias) {
        return new DocumentImportChunk(DSL.name(alias), this);
    }

    @Override
    public DocumentImportChunk as(Name alias) {
        return new DocumentImportChunk(alias, this);
    }

    @Override
    public DocumentImportChunk as(Table<?> alias) {
        return new DocumentImportChunk(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentImportChunk rename(String name) {
        return new DocumentImportChunk(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentImportChunk rename(Name name) {
        return new DocumentImportChunk(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentImportChunk rename(Table<?> name) {
        return new DocumentImportChunk(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImportChunk where(Condition condition) {
        return new DocumentImportChunk(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImportChunk where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImportChunk where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImportChunk where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImportChunk where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImportChunk where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImportChunk where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentImportChunk where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImportChunk whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentImportChunk whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, String, JSONB, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Integer, ? super String, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Integer, ? super String, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
