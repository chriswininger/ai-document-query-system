/*
 * This file is generated by jOOQ.
 */
package com.wininger.spring_ai_demo.jooq.generated.tables;


import com.wininger.spring_ai_demo.jooq.generated.Public;
import com.wininger.spring_ai_demo.jooq.generated.tables.records.EachRecord;

import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Each extends TableImpl<EachRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.each</code>
     */
    public static final Each EACH = new Each();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EachRecord> getRecordType() {
        return EachRecord.class;
    }

    /**
     * The column <code>public.each.key</code>.
     */
    public final TableField<EachRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.each.value</code>.
     */
    public final TableField<EachRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private Each(Name alias, Table<EachRecord> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, DefaultDataType.getDefaultDataType("\"public\".\"hstore\""))
        });
    }

    private Each(Name alias, Table<EachRecord> aliased, Field<?>[] parameters) {
        this(alias, aliased, parameters, null);
    }

    private Each(Name alias, Table<EachRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function(), where);
    }

    /**
     * Create an aliased <code>public.each</code> table reference
     */
    public Each(String alias) {
        this(DSL.name(alias), EACH);
    }

    /**
     * Create an aliased <code>public.each</code> table reference
     */
    public Each(Name alias) {
        this(alias, EACH);
    }

    /**
     * Create a <code>public.each</code> table reference
     */
    public Each() {
        this(DSL.name("each"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Each as(String alias) {
        return new Each(DSL.name(alias), this, parameters);
    }

    @Override
    public Each as(Name alias) {
        return new Each(alias, this, parameters);
    }

    @Override
    public Each as(Table<?> alias) {
        return new Each(alias.getQualifiedName(), this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Each rename(String name) {
        return new Each(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Each rename(Name name) {
        return new Each(name, null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Each rename(Table<?> name) {
        return new Each(name.getQualifiedName(), null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public Each call(
          Object hs
    ) {
        Each result = new Each(DSL.name("each"), null, new Field[] {
            DSL.val(hs, DefaultDataType.getDefaultDataType("\"public\".\"hstore\""))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public Each call(
          Field<Object> hs
    ) {
        Each result = new Each(DSL.name("each"), null, new Field[] {
            hs
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
